
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Weak Signal Propagation Reporter (WSPR) Recieve Code         %
%      Refernece credit to Dr. Jonathon Y. Cheah (NZ0C)          %
%                   for the use of this code                     %
%           Ultra low baud rate communication study              %
%                                                                %
%               Consult www.wsprnet.org for details              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% clear all Matlab memory buffers
clear
%% get the channel symbol file generated by transmit code
signal=textread('signal.dat','%u'); 
sym=zeros(length(signal),1);
%% set the initial variable configuration
MAXBITS=103;
nstate=zeros(MAXBITS-1);          %
gamma=zeros(MAXBITS-1);           %
metrics=zeros(4,MAXBITS-1);       %
tm=zeros(2,MAXBITS-1);            %

% configure FEC sequence
npoly1=2^32-221228207;
npoly2=2^32-463389625;

% configure the Fano decoder 
partab=textread('partab.dat','%u');
mettab=textread('mettab.dat','%d');
mettab=reshape(mettab,256,2);

% configure the sync sequence
sync=textread('sync.dat','%u'); 
%% Strip the sync sequence from channel signal.
sym=uint8(sign(signal-sync));
disp ('wspr signal sync stripped:')
sy1=reshape(sym,8,length(sym)/8)';                   %
disp (sy1)
%% De-interleave channel symbols.
%      symbol=deinterleave(sym);
P=1;
I=0;
symbol=zeros(1,168);
while P < 162
%        J=bin2dec(fliplr(bin(fi(I,0,8,0))));
    J=bin2dec(fliplr(dec2bin(I,8)));
    if J<162
        symbol(P)=sym(J+1);
        P=P+1;
    end
    I=I+1;
end
disp ('De-interleaved:')
sy2=reshape(symbol,8,length(symbol)/8)';                   %
disp(sy2)
%% Configure fano decoder.
dat=zeros(11);
nsym=162;
nbits=50+31;
ndelta=50;
maxcycles=20000;
ntail=nbits-31;
i4a=0;
i4b=0;
  for np =1:nbits
      j=2*np;
      i4a=-symbol(j-1);
      i4b=-symbol(j);
      if (i4a<0)
          i4a=i4a+256;
      end
      if (i4b<0)
          i4b=i4b+256;
      end
      metrics(1,np) = mettab(i4a+1,1) + mettab(i4b+1,1);
      metrics(2,np) = mettab(i4a+1,1) + mettab(i4b+1,2);
      metrics(3,np) = mettab(i4a+1,2) + mettab(i4b+1,1);
      metrics(4,np) = mettab(i4a+1,2) + mettab(i4b+1,2);
  end
np=1;
nstate(np)=0;   
%% Compute and sort fano branch metrics 
n=bitand(nstate(np),npoly1);
n=bitxor(n,bitshift(n,-16));
m=bitand(bitxor(n,bitshift(n,-8)),255);
lsym=partab(m+1);
n=bitand(nstate(np),npoly2);
n=bitxor(n,bitshift(n,-16));
m=bitand(bitxor(n,bitshift(n,-8)),255);
lsym=lsym+lsym+partab(m+1);
m0=metrics(lsym+1,np);
m1=metrics(bitxor(3,lsym)+1,np);

%  tm(1,np)=m0 if 0-branch is better
%           =m1 if 1-branch is better
  if m0>m1
      tm(1,np)= m0;                   
      tm(2,np)=m1;
  else
      tm(1,np)=m1;                    
      tm(2,np)=m0;
      nstate(np)=mod(nstate(np) + 1,2^32) ;     
  end

ii(np)=0;                                
gamma(np)=0;
nt=0;
%% Start fano with the best branch
for i=1:nbits*maxcycles-1                
    ngamma=gamma(np) + tm(ii(np)+1,np);
    if ngamma>nt         
        if gamma(np)<(nt+ndelta)
            nt=nt + ndelta * floor((ngamma-nt)/ndelta);
        end

        gamma(np+1)=ngamma;              
        nstate(np+1)=mod(bitshift(nstate(np),1),2^32);
        np=np+1;
%% fano decoding done.
        if np == nbits
            break                            
        end
%% fano processing.          
        n=mod(bitand(nstate(np),npoly1),2^32);
        n=mod(bitxor(n,bitshift(n,-16)),2^32);
        lsym=partab(bitand(bitxor(n,bitshift(n,-8)),255)+1);
        n=mod(bitand(nstate(np),npoly2),2^32);
        n=mod(bitxor(n,bitshift(n,-16)),2^32);
        lsym=lsym+lsym+partab(bitand(bitxor(n,bitshift(n,-8)),255)+1);
%% fano at the tail
        if np >ntail+1
            tm(1,np)=metrics(lsym+1,np);   
        else
            m0=metrics(lsym+1,np);
            m1=metrics(bitxor(3,lsym)+1,np);
            if m0>m1
                  tm(1,np)=m0;              
                  tm(2,np)=m1;
            else
                  tm(1,np)=m1;               
                  tm(2,np)=m0;
                  nstate(np)=mod(nstate(np) + 1,2^32);  
            end
        end
%% Start at the best branch
        ii(np)=0;                        
        continue     
    end % if gamma
    
    npp=0;

    while(true)    
        noback=0;
        if np==1
            noback=1;
        end   
        if np>1        
            if gamma(np-1)<nt
                    noback=1;
            end
        end
        if(noback)
            nt=nt-ndelta;
            if ii(np)~=0
                ii(np)=0;
                nstate(np)=mod(bitxor(nstate(np),1),32);
            end
            break   
        end   
%% Back up search          
        np=np-1;                            
        if(np<ntail+1 && ii(np)~=1)
         %Search next best branch
            ii(np)=ii(np)+1;                   
            nstate(np)=mod(bitxor(nstate(np),1),2^32);
            break
        end
     end
end

metric=gamma(np);
%% message code generation 
nbytes=(nbits+7)/8;                               
np=8;
for j=1:nbytes-1
    i4a=nstate(np);
      if mod(floor(i4a/128),2)==1
         dat(j) = mod(i4a,128)-128;
        else
         dat(j) = mod(i4a,128);
      end     
    np=np+8;
end
%% Clean-up and display recived message.
dat(nbytes)=0;

disp ('message code:')
da=dat(:,1);
disp(da')
message=messageDecode(dat);
fprintf('Received message = %s\n', message{:});  
